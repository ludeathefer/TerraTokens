func (r *queryResolver) TransactedTokens(ctx context.Context) ([]*model.TransactedToken, error) {
	db := r.Database

	query := `
        SELECT
            tt.id,
            lt.land_id, lt.name, lt.total_tokens, lt.created_at AS land_created_at, lt.updated_at AS land_updated_at, lt.current_price,
            lt.property_type, lt.property_size, lt.property_size_unit, lt.landmark, lt.distance_from_landmark, lt.distance_unit,
            lt.property_description, lt.latitude, lt.longitude,
            tt.quantity, tt.price, tt.from_user, tt.to_user, tt.created_at
        FROM transacted_tokens tt
        JOIN land_tokens lt ON tt.land_token_id = lt.land_id
        ORDER BY tt.created_at DESC
    `

	rows, err := db.QueryContext(ctx, query)
	if err != nil {
		return nil, fmt.Errorf("failed to query transacted tokens: %w", err)
	}
	defer rows.Close()

	var transactedTokens []*model.TransactedToken
	for rows.Next() {
		transactedToken := &model.TransactedToken{}
		landToken := &model.LandToken{}
		var fromUserPublicKey sql.NullString
		var toUserPublicKey sql.NullString

		err := rows.Scan(
			&transactedToken.ID,
			&landToken.LandID, &landToken.Name, &landToken.TotalTokens, &landToken.CreatedAt, &landToken.UpdatedAt, &landToken.CurrentPrice,
			&landToken.PropertyType, &landToken.PropertySize, &landToken.PropertySizeUnit, &landToken.Landmark, &landToken.DistanceFromLandmark, &landToken.DistanceUnit,
			&landToken.PropertyDescription, &landToken.Latitude, &landToken.Longitude,
			&transactedToken.Quantity, &transactedToken.Price, &fromUserPublicKey, &toUserPublicKey, &transactedToken.CreatedAt,
		)
		if err != nil {
			return nil, fmt.Errorf("failed to scan transacted token: %w", err)
		}

		// Fetch prices for the land token
		prices, err := r.fetchPricesForLandToken(ctx, db, landToken.LandID)
		if err != nil {
			return nil, fmt.Errorf("failed to fetch prices for land token %d: %w", landToken.LandID, err)
		}
		landToken.Prices = prices
		transactedToken.LandToken = landToken

		// Fetch 'from' user if available
		if fromUserPublicKey.Valid {
			fromUser, err := r.fetchUserByPublicKey(ctx, db, fromUserPublicKey.String)
			if err != nil {
				fmt.Printf("failed to fetch 'from' user %s: %v\n", fromUserPublicKey.String, err) // Log error, don't block all transactions
			}
			transactedToken.From = fromUser
		}

		// Fetch 'to' user if available
		if toUserPublicKey.Valid {
			toUser, err := r.fetchUserByPublicKey(ctx, db, toUserPublicKey.String)
			if err != nil {
				fmt.Printf("failed to fetch 'to' user %s: %v\n", toUserPublicKey.String, err) // Log error, don't block all transactions
			}
			transactedToken.To = toUser
		}

		transactedTokens = append(transactedTokens, transactedToken)
	}

	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("error iterating transacted tokens rows: %w", err)
	}

	return transactedTokens, nil
}

func (r *queryResolver) fetchUserByPublicKey(ctx context.Context, db *sql.DB, publicKey string) (*model.User, error) {
	query := `
        SELECT public_key, username, phone, email, created_at, updated_at
        FROM users
        WHERE public_key = ?
    `
	row := db.QueryRowContext(ctx, query, publicKey)

	user := &model.User{}
	err := row.Scan(&user.PublicKey, &user.Username, &user.Phone, &user.Email, &user.CreatedAt, &user.UpdatedAt)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, nil // User not found, which is acceptable for from/to users
		}
		return nil, fmt.Errorf("failed to scan user: %w", err)
	}

	// Fetch roles for the user (similar to your Login resolver)
	roles, err := r.fetchRolesForUser(ctx, db, publicKey)
	if err != nil {
		fmt.Printf("failed to fetch roles for user %s: %v\n", publicKey, err) // Log error, don't block user fetching
	}
	user.Roles = roles

	return user, nil
}

func (r *queryResolver) fetchRolesForUser(ctx context.Context, db *sql.DB, publicKey string) ([]*model.Role, error) {
	query := `
        SELECT r.id, r.name, r.description
        FROM users u
        LEFT JOIN user_roles ur ON u.public_key = ur.user_public_key
        LEFT JOIN roles r ON ur.role_id = r.id
        WHERE u.public_key = ?
    `
	rows, err := db.QueryContext(ctx, query, publicKey)
	if err != nil {
		return nil, fmt.Errorf("failed to query roles for user %s: %w", publicKey, err)
	}
	defer rows.Close()

	var roles []*model.Role
	for rows.Next() {
		role := &model.Role{}
		if err := rows.Scan(&role.ID, &role.Name, &role.Description); err != nil {
			return nil, fmt.Errorf("failed to scan role for user %s: %w", publicKey, err)
		}
		roles = append(roles, role)
	}

	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("error iterating roles rows for user %s: %w", publicKey, err)
	}

	return roles, nil
}

func (r *queryResolver) OwnedTokens(ctx context.Context) ([]*model.OwnedToken, error) {
	gc, ok := ctx.Value(middleware.GinContextKey).(*gin.Context)
	if !ok {
		return nil, fmt.Errorf("can't get context")
	}

	userPublicKey := gc.GetString(string(middleware.UserContextKey))
	db := r.Database

	query := `
        SELECT
            ot.user_public_key,
            lt.land_id, lt.name, lt.total_tokens, lt.created_at AS land_created_at, lt.updated_at AS land_updated_at, lt.current_price,
            lt.property_type, lt.property_size, lt.property_size_unit, lt.landmark, lt.distance_from_landmark, lt.distance_unit,
            lt.property_description, lt.latitude, lt.longitude,
            ot.bought_price, ot.quantity, ot.created_at AS owned_at
        FROM owned_tokens ot
        JOIN land_tokens lt ON ot.land_token_id = lt.land_id
        WHERE ot.user_public_key = ?
    `

	rows, err := db.QueryContext(ctx, query, userPublicKey)
	if err != nil {
		return nil, fmt.Errorf("failed to query owned tokens: %w", err)
	}
	defer rows.Close()

	var ownedTokens []*model.OwnedToken
	for rows.Next() {
		ownedToken := &model.OwnedToken{}
		landToken := &model.LandToken{}

		err := rows.Scan(
			&ownedToken.UserPublicKey,
			&landToken.LandID, &landToken.Name, &landToken.TotalTokens, &landToken.CreatedAt, &landToken.UpdatedAt, &landToken.CurrentPrice,
			&landToken.PropertyType, &landToken.PropertySize, &landToken.PropertySizeUnit, &landToken.Landmark, &landToken.DistanceFromLandmark, &landToken.DistanceUnit,
			&landToken.PropertyDescription, &landToken.Latitude, &landToken.Longitude,
			&ownedToken.BoughtPrice, &ownedToken.Quantity, &ownedToken.CreatedAt,
		)
		if err != nil {
			return nil, fmt.Errorf("failed to scan owned token: %w", err)
		}

		// Fetch prices for the current land token
		prices, err := r.fetchPricesForLandToken(ctx, db, landToken.LandID)
		if err != nil {
			return nil, fmt.Errorf("failed to fetch prices for land token %d: %w", landToken.LandID, err)
		}
		landToken.Prices = prices
		ownedToken.LandToken = landToken
		ownedTokens = append(ownedTokens, ownedToken)
	}

	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("error iterating owned tokens rows: %w", err)
	}

	return ownedTokens, nil
}

func (r *queryResolver) fetchPricesForLandToken(ctx context.Context, db *sql.DB, landTokenID int32) ([]*model.Price, error) {
	query := `
        SELECT id, date, value
        FROM prices
        WHERE land_token_id = ?
        ORDER BY date DESC
    `
	rows, err := db.QueryContext(ctx, query, landTokenID)
	if err != nil {
		return nil, fmt.Errorf("failed to query prices for land token %d: %w", landTokenID, err)
	}
	defer rows.Close()

	var prices []*model.Price
	for rows.Next() {
		price := &model.Price{}
		var id int
		var date time.Time
		var value float64
		if err := rows.Scan(&id, &date, &value); err != nil {
			return nil, fmt.Errorf("failed to scan price for land token %d: %w", landTokenID, err)
		}
		price.ID = id
		price.Date = date
		price.Value = value
		prices = append(prices, price)
	}

	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("error iterating prices rows for land token %d: %w", landTokenID, err)
	}

	return prices, nil
}

func (r *mutationResolver) AddPriceToLandToken(ctx context.Context, landId int, input model.CreatePriceInput) (*model.LandToken, error) {
	db := r.Database

	// Check if the land token exists
	var exists bool
	err := db.QueryRowContext(ctx, "SELECT EXISTS(SELECT 1 FROM land_tokens WHERE land_id = ?)", landId).Scan(&exists)
	if err != nil {
		return nil, fmt.Errorf("failed to check if land token exists: %w", err)
	}
	if !exists {
		return nil, fmt.Errorf("land token with ID %d not found", landId)
	}

	// Insert the new price
	_, err = db.ExecContext(ctx, "INSERT INTO prices (land_token_id, value) VALUES (?, ?)", landId, input.Value)
	if err != nil {
		return nil, fmt.Errorf("failed to insert new price: %w", err)
	}

	// Update the current price in the land_tokens table
	_, err = db.ExecContext(ctx, "UPDATE land_tokens SET current_price = ?, updated_at = ? WHERE land_id = ?", input.Value, time.Now(), landId)
	if err != nil {
		return nil, fmt.Errorf("failed to update current price of land token: %w", err)
	}

	// Fetch the updated land token with its prices
	landToken, err := r.fetchLandTokenByID(ctx, db, landId)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch updated land token: %w", err)
	}

	return landToken, nil
}

func (r *queryResolver) fetchLandTokenByID(ctx context.Context, db *sql.DB, landID int32) (*model.LandToken, error) {
	query := `
        SELECT
            land_id, name, total_tokens, created_at, updated_at, current_price,
            property_type, property_size, property_size_unit, landmark, distance_from_landmark, distance_unit,
            property_description, latitude, longitude
        FROM land_tokens
        WHERE land_id = ?
    `
	row := db.QueryRowContext(ctx, query, landID)

	landToken := &model.LandToken{}
	err := row.Scan(
		&landToken.LandID, &landToken.Name, &landToken.TotalTokens, &landToken.CreatedAt, &landToken.UpdatedAt, &landToken.CurrentPrice,
		&landToken.PropertyType, &landToken.PropertySize, &landToken.PropertySizeUnit, &landToken.Landmark, &landToken.DistanceFromLandmark, &landToken.DistanceUnit,
		&landToken.PropertyDescription, &landToken.Latitude, &landToken.Longitude,
	)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, fmt.Errorf("land token with ID %d not found", landID)
		}
		return nil, fmt.Errorf("failed to scan land token: %w", err)
	}

	// Fetch prices for the land token
	prices, err := r.fetchPricesForLandToken(ctx, db, landToken.LandID)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch prices for land token %d: %w", landToken.LandID, err)
	}
	landToken.Prices = prices

	return landToken, nil
}