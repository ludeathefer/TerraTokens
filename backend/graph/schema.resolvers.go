package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/ludeathfer/TerraTokens/backend/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id uuid.UUID, input model.UpdateUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// CreateLandToken is the resolver for the createLandToken field.
func (r *mutationResolver) CreateLandToken(ctx context.Context, privateKey string, input model.CreateLandTokenInput) (*model.LandToken, error) {
	panic(fmt.Errorf("not implemented: CreateLandToken - createLandToken"))
}

// UpdateLandToken is the resolver for the updateLandToken field.
func (r *mutationResolver) UpdateLandToken(ctx context.Context, id uuid.UUID, input model.CreateLandTokenInput) (*model.LandToken, error) {
	panic(fmt.Errorf("not implemented: UpdateLandToken - updateLandToken"))
}

// AddPriceToLandToken is the resolver for the addPriceToLandToken field.
func (r *mutationResolver) AddPriceToLandToken(ctx context.Context, landTokenID uuid.UUID, input model.CreatePriceInput) (*model.LandToken, error) {
	panic(fmt.Errorf("not implemented: AddPriceToLandToken - addPriceToLandToken"))
}

// BuyToken is the resolver for the buyToken field.
func (r *mutationResolver) BuyToken(ctx context.Context, privateKey string, input model.BuyTokenInput) (*model.TransactedToken, error) {
	panic(fmt.Errorf("not implemented: BuyToken - buyToken"))
}

// CreateSale is the resolver for the createSale field.
func (r *mutationResolver) CreateSale(ctx context.Context, privateKey string, input model.CreateSaleInput) (*model.Sale, error) {
	panic(fmt.Errorf("not implemented: CreateSale - createSale"))
}

// UpdateSale is the resolver for the updateSale field.
func (r *mutationResolver) UpdateSale(ctx context.Context, privateKey string, id uuid.UUID, input model.UpdateSaleInput) (*model.Sale, error) {
	panic(fmt.Errorf("not implemented: UpdateSale - updateSale"))
}

// DeleteSale is the resolver for the deleteSale field.
func (r *mutationResolver) DeleteSale(ctx context.Context, privateKey string, id int) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteSale - deleteSale"))
}

// AddToWatchlist is the resolver for the addToWatchlist field.
func (r *mutationResolver) AddToWatchlist(ctx context.Context, landTokenID uuid.UUID) (*model.User, error) {
	panic(fmt.Errorf("not implemented: AddToWatchlist - addToWatchlist"))
}

// RemoveFromWatchlist is the resolver for the removeFromWatchlist field.
func (r *mutationResolver) RemoveFromWatchlist(ctx context.Context, landTokenID uuid.UUID) (*model.User, error) {
	panic(fmt.Errorf("not implemented: RemoveFromWatchlist - removeFromWatchlist"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id uuid.UUID) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Login is the resolver for the login field.
func (r *queryResolver) Login(ctx context.Context, publicKey string) (*model.LoginResponse, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// LandTokens is the resolver for the landTokens field.
func (r *queryResolver) LandTokens(ctx context.Context) ([]*model.LandToken, error) {
	panic(fmt.Errorf("not implemented: LandTokens - landTokens"))
}

// LandToken is the resolver for the landToken field.
func (r *queryResolver) LandToken(ctx context.Context, id uuid.UUID) (*model.LandToken, error) {
	panic(fmt.Errorf("not implemented: LandToken - landToken"))
}

// Sales is the resolver for the sales field.
func (r *queryResolver) Sales(ctx context.Context) ([]*model.Sale, error) {
	panic(fmt.Errorf("not implemented: Sales - sales"))
}

// Sale is the resolver for the sale field.
func (r *queryResolver) Sale(ctx context.Context, id int) (*model.Sale, error) {
	panic(fmt.Errorf("not implemented: Sale - sale"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
