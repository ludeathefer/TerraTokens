scalar Time
scalar UUID

type Price {
  id: ID!
  date: Time!
  value: Float!
}

type LandToken {
  id: UUID!
  landId: Int!
  name: String!
  totalTokens: Int!
  createdAt: Time!
  updatedAt: Time!
  currentPrice: Float!
  prices: [Price!]!
  propertyType: String!
  propertySize: Float!
  propertySizeUnit: String!
  landmark: String!
  distanceFromLandmark: Float!
  distanceUnit: String!
  propertyDescription: String!
  latitude: String!
  longitude: String!
}

type Role {
  id: ID!
  name: String!
  description: String
}

type OwnedToken {
  id: ID!
  landToken: LandToken!
  quantity: Int!
}

type TransactedToken {
  id: ID!
  landToken: LandToken!
  quantity: Int!
  price: Float!
  from: User
  to: User
  createdAt: Time!
}

type Sale {
  id: ID!
  landToken: LandToken!
  quantity: Int!
  price: Float!
  seller: User!
  createdAt: Time!
}

type User {
  id: UUID!
  publicKey: String!
  username: String!
  phone: String!
  email: String!
  password: String!
  roles: [Role!]!
  createdAt: Time!
  updatedAt: Time!
  watchlist: [LandToken!]!
  ownedTokens: [OwnedToken!]!
  boughtTokens: [TransactedToken!]!
  sales: [Sale!]!
  soldTokens: [TransactedToken!]!
}

input CreateLandTokenInput {
  name: String!
  totalTokens: Int!
  currentPrice: Float!
  propertyType: String!
  propertySize: Float!
  propertySizeUnit: String!
  landmark: String!
  distanceFromLandmark: Float!
  distanceUnit: String!
  propertyDescription: String!
  latitude: String!
  longitude: String!
}

input CreateUserInput {
  publicKey: String!
  username: String!
  phone: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  username: String
  phone: String
  email: String
  password: String
}

input CreatePriceInput {
  date: Time!
  value: Float!
}

input CreateSaleInput {
  landTokenId: UUID!
  quantity: Int!
  price: Float!
}

input UpdateSaleInput {
  quantity: Int!
  price: Float!
}

input BuyTokenInput {
  saleId: ID!
  quantity: Int!
}

type LoginResponse {
  token: String!
  User: User!
}

type Query {
  users: [User!]! @auth(requires: ["admin"])
  user(id: UUID!): User @auth
  login(email: String!, password: String!): LoginResponse!
  landTokens: [LandToken!]! @auth
  landToken(id: UUID!): LandToken @auth
  sales: [Sale!]! @auth
  sale(id: ID!): Sale @auth
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(id: UUID!, input: UpdateUserInput!): User! @auth
  deleteUser(id: UUID!): Boolean! @auth(requires: ["admin"])
  createLandToken(
    privateKey: String!
    input: CreateLandTokenInput!
  ): LandToken! @auth(requires: ["admin"])
  updateLandToken(id: UUID!, input: CreateLandTokenInput!): LandToken!
    @auth(requires: ["admin"])
  addPriceToLandToken(landTokenId: UUID!, input: CreatePriceInput!): LandToken!
    @auth(requires: ["admin"])
  buyToken(privateKey: String!, input: BuyTokenInput!): TransactedToken! @auth
  createSale(privateKey: String!, input: CreateSaleInput!): Sale! @auth
  updateSale(privateKey: String!, id: UUID!, input: UpdateSaleInput!): Sale!
    @auth
  deleteSale(privateKey: String!, id: ID!): Boolean! @auth
  addToWatchlist(landTokenId: UUID!): User @auth
  removeFromWatchlist(landTokenId: UUID!): User @auth
}

directive @auth(requires: [String!] = []) on FIELD_DEFINITION
