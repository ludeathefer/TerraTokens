scalar Time

directive @auth(requires: [String!] = []) on FIELD_DEFINITION

# models
type Price {
  id: ID!
  date: Time!
  value: Float!
}

type LandToken {
  landId: Int!
  name: String!
  totalTokens: Int!
  createdAt: Time!
  updatedAt: Time!
  currentPrice: Float!
  prices: [Price!]!
  propertyType: String!
  propertySize: Float!
  propertySizeUnit: String!
  landmark: String!
  distanceFromLandmark: Float!
  distanceUnit: String!
  propertyDescription: String!
  latitude: String!
  longitude: String!
}

type Role {
  id: ID!
  name: String!
  description: String
}

type OwnedToken {
  userPublicKey: String!
  landToken: LandToken!
  boughtPrice: Float!
  quantity: Int!
  createdAt: Time!
}

type TransactedToken {
  id: ID!
  landToken: LandToken!
  quantity: Int!
  price: Float!
  from: User
  to: User
  createdAt: Time!
}

type Sale {
  sellerId: String!
  landToken: LandToken!
  quantity: Int!
  price: Float!
  seller: User!
  createdAt: Time!
}

type User {
  publicKey: String!
  username: String!
  phone: String!
  email: String!
  roles: [Role!]!
  createdAt: Time!
  updatedAt: Time!
  watchlist: [LandToken!]!
  ownedTokens: [OwnedToken!]!
  boughtTokens: [TransactedToken!]!
  sales: [Sale!]!
  soldTokens: [TransactedToken!]!
}

# inputs and responses
input CreateLandTokenInput {
  name: String!
  currentPrice: Float!
  propertyType: String!
  propertySize: Float!
  propertySizeUnit: String!
  landmark: String!
  distanceFromLandmark: Float!
  distanceUnit: String!
  propertyDescription: String!
  latitude: String!
  longitude: String!
}

input CreateUserInput {
  publicKey: String!
  username: String!
  phone: String!
  email: String!
}

input UpdateUserInput {
  username: String
  phone: String
  email: String
  password: String
}

input CreatePriceInput {
  date: Time!
  value: Float!
}

input CreateSaleInput {
  landTokenId: Int!
  quantity: Int!
  price: Float!
}

input UpdateSaleInput {
  quantity: Int!
  price: Float!
}

input BuyTokenInput {
  saleId: ID!
  quantity: Int!
}

type LoginResponse {
  token: String!
  User: User!
}

type Query {
  users: [User!]! @auth(requires: ["admin"])
  user(publicKey: String!): User @auth
  login(publicKey: String!): LoginResponse!
  landTokens: [LandToken!]! @auth
  landToken(landId: Int!): LandToken @auth
  sales: [Sale!]! @auth
  sale(id: ID!): Sale @auth
  ownedTokens: [OwnedToken!]! @auth
  transactedTokens: [TransactedToken!] @auth
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(publicKey: String!, input: UpdateUserInput!): User! @auth
  deleteUser(publicKey: String!): Boolean! @auth(requires: ["admin"])
  createLandToken(input: CreateLandTokenInput!): LandToken!
    @auth(requires: ["admin"])
  updateLandToken(publicKey: String!, input: CreateLandTokenInput!): LandToken!
    @auth(requires: ["admin"])
  addPriceToLandToken(publicKey: String!, input: CreatePriceInput!): LandToken!
    @auth(requires: ["admin"])
  # buyToken(input: BuyTokenInput!): TransactedToken! @auth
  # createSale(input: CreateSaleInput!): Sale! @auth
  # updateSale(id: ID!, input: UpdateSaleInput!): Sale! @auth
  # deleteSale(id: ID!): Boolean! @auth
  addToWatchlist(publicKey: String!): User @auth
  removeFromWatchlist(publicKey: String!): User @auth
}
